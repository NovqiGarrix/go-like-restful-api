import { novo, ObjectId } from "@deps";
import {
    assertArrayIncludes,
    assertObjectMatch,
    describe,
    expect,
    it,
} from "@testDeps";

import excludeFields from "@utils/excludeFields.ts";

import { ITodo } from "./todo.model.ts";
import todoService from "./todo.service.ts";
import {
    CreateUpdateOneTodo,
    ITodoRepository,
    TodoRepository,
} from "./todo.repository.ts";

let repo: ITodoRepository;

const todoServiceTest = describe("Todo Repository Test", {
    async beforeAll() {
        await novo.connect("mongodb://localhost:27017/deno_server");
        repo = new TodoRepository();
    },

    afterAll() {
        novo.disconnect();
    },
});

const rawTodos: Array<CreateUpdateOneTodo> = [
    { description: "Todo 1's descriptions", isDone: false, title: "Todo 1" },
    { description: "Todo 2's descriptions", isDone: true, title: "Todo 2" },
];

const autoGeneratedFields = ["_id", "createdAt", "updatedAt"];

it(todoServiceTest, "#1. Create", async (t) => {
    for await (const rawTodo of rawTodos) {
        await t.step(`Creating: ${rawTodo.title}`, async () => {
            const [todo, err, statusCode] = await todoService.create(
                repo,
                rawTodo,
            );
            expect(statusCode).toBeDefined();

            if (err) throw err;

            const { _id, createdAt, updatedAt, ...rest } = todo!;

            if (!(new String(_id) instanceof String)) {
                throw new Error("Invalid _id");
            }

            if (!(createdAt instanceof Date)) {
                throw new Error("Invalid createdAt");
            }

            if (!(updatedAt instanceof Date)) {
                throw new Error("Invalid updatedAt");
            }

            expect(rest).toEqual(rawTodo);
            await repo.deleteOne(_id);
        });
    }
});

it(todoServiceTest, "#2. Find All", async (t) => {
    const todos = await createTodos();

    await t.step("Find All Without Options", async () => {
        const [todos, err, statusCode] = await todoService.findAll(repo);
        expect(statusCode).toBeDefined();

        if (err) throw err;

        assertArrayIncludes(
            excludeFields(todos, autoGeneratedFields),
            rawTodos,
        );
    });

    await t.step("Find All With Options", async () => {
        const [todos, err, statusCode] = await todoService.findAll(repo, {
            filter: { isDone: false },
            limit: 1,
        });

        expect(statusCode).toBeDefined();

        if (err) throw err;

        assertArrayIncludes(excludeFields(todos, autoGeneratedFields), [
            rawTodos.find((x) => x.isDone === false),
        ]);
    });

    for (const todo of todos) {
        await repo.deleteOne(todo._id);
    }
});

async function createTodos(): Promise<Array<ITodo>> {
    const promisesOfTodos = rawTodos.map(async (td) => {
        const [todo] = await todoService.create(repo, td);
        return todo;
    });

    const todos = (await Promise.all(promisesOfTodos)).filter((x) =>
        !!x
    ) as Array<ITodo>;
    return todos;
}

it(todoServiceTest, "#4. Delete One", async (t) => {
    const todos = await createTodos();

    for await (const td of todos) {
        await t.step(`Finding: ${td.title}`, async () => {
            const [todo, err] = await todoService.findOne(repo, td._id);
            if (err) throw err;

            assertObjectMatch(todo, td);

            await repo.deleteOne(td._id);
        });
    }

    // No todo found
    await t.step(`Finding: No todo found`, async () => {
        const [todo, err] = await todoService.findOne(repo, new ObjectId());
        expect(err).toBeNull();
        expect(todo).toBeUndefined();
    });
});

it(todoServiceTest, "#4. Delete One", async (t) => {
    for await (const td of await createTodos()) {
        await t.step(`Finding: ${td.title}`, async () => {
            const [todo, err] = await todoService.findOne(repo, td._id);
            expect(err).toBeNull();

            await todoService.deleteOne(repo, todo?._id!);

            const [todo2, err2] = await todoService.findOne(repo, td._id);

            expect(err2).toBeNull();
            expect(todo2).toBeUndefined();
        });
    }
});
