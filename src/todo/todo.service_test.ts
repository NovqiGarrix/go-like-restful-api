import { assertArrayIncludes, expect } from '@testDeps';

import excludeFields from '@utils/excludeFields.ts';

import todoService from './todo.service.ts';
import TodoRepository, { CreateUpdateOneTodo } from "./todo.repository.ts";

const rawTodos: Array<CreateUpdateOneTodo> = [
    { description: "Todo 1's descriptions", isDone: false, title: "Todo 1" },
    { description: "Todo 2's descriptions", isDone: true, title: "Todo 2" }
];

const autoGeneratedFields = ["_id", "createdAt", "updatedAt"];

Deno.test("#1. Create", async (t) => {

    const repo = new TodoRepository();

    for await (const rawTodo of rawTodos) {
        await t.step(`Creating: ${rawTodo.title}`, async () => {

            const [todo, err, statusCode] = await todoService.create(repo, rawTodo);
            expect(statusCode).toBeDefined();

            if (err) throw err;

            const { _id, createdAt, updatedAt, ...rest } = todo!;

            if (!(new String(_id) instanceof String)) {
                throw new Error("Invalid _id");
            }

            if (!(createdAt instanceof Date)) {
                throw new Error("Invalid createdAt");
            }

            if (!(updatedAt instanceof Date)) {
                throw new Error("Invalid updatedAt");
            }

            expect(rest).toEqual(rawTodo);

        })
    }

});

Deno.test("#2. Find All", async (t) => {

    const repo = new TodoRepository();

    await t.step("Find All Without Options", async () => {

        const [todos, err, statusCode] = await todoService.findAll(repo);
        expect(statusCode).toBeDefined();

        if (err) throw err;

        assertArrayIncludes(excludeFields(todos, autoGeneratedFields), rawTodos);

    });

    await t.step("Find All With Options", async () => {

        const [todos, err, statusCode] = await todoService.findAll(repo, {
            filter: { isDone: false },
            limit: 1,
        });

        expect(statusCode).toBeDefined();

        if (err) throw err;

        assertArrayIncludes(excludeFields(todos, autoGeneratedFields), [
            rawTodos.find((x) => x.isDone === false)
        ]);

    });

});